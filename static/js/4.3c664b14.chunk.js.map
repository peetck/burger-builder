{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/Auth.js"],"names":["input","props","inputElement","inputClasses","classes","InputElement","validationError","invalid","shouldValidate","touched","push","Invalid","className","ValidationError","elementType","onChange","changed","join","elementConfig","value","options","map","option","key","displayValue","Input","Label","label","module","exports","Auth","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","preventDefault","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","id","config","form","formElement","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions"],"mappings":"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","file":"static/js/4.3c664b14.chunk.js","sourcesContent":["import React from \"react\";\r\nimport classes from \"./Input.module.css\";\r\n\r\nconst input = (props) => {\r\n  let inputElement = null;\r\n  const inputClasses = [classes.InputElement];\r\n\r\n  let validationError = null;\r\n\r\n  if (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(classes.Invalid);\r\n    validationError = (\r\n      <p className={classes.ValidationError}>Please enter a valid value!</p>\r\n    );\r\n  }\r\n\r\n  switch (props.elementType) {\r\n    case \"input\":\r\n      inputElement = (\r\n        <input\r\n          onChange={props.changed}\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      );\r\n      break;\r\n    case \"textarea\":\r\n      inputElement = (\r\n        <textarea\r\n          onChange={props.changed}\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      );\r\n      break;\r\n    case \"select\":\r\n      inputElement = (\r\n        <select\r\n          onChange={props.changed}\r\n          className={inputClasses.join(\" \")}\r\n          value={props.value}\r\n        >\r\n          {props.elementConfig.options.map((option) => (\r\n            <option key={option.value} value={option.value}>\r\n              {option.displayValue}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          onChange={props.changed}\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Input}>\r\n      <label className={classes.Label}>{props.label}</label>\r\n      {inputElement}\r\n      {validationError}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__Pc0-H\",\"Label\":\"Input_Label__1es4q\",\"InputElement\":\"Input_InputElement__3j6_h\",\"Invalid\":\"Input_Invalid__37HzK\",\"ValidationError\":\"Input_ValidationError__2UZ2h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__QGqTC\",\"ContactData\":\"Auth_ContactData__EBW3D\"};","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport classes from \"./Auth.module.css\";\r\nimport * as actions from \"../../store/actions/index\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport { updateObject, checkValidity } from \"../../shared/utility\";\r\n\r\nclass Auth extends Component {\r\n  state = {\r\n    controls: {\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Mail Address\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          isEmail: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      password: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"password\",\r\n          placeholder: \"Password\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 6,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n    },\r\n    isSignup: true,\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== \"/\") {\r\n      this.props.onSetAuthRedirectPath();\r\n    }\r\n  }\r\n\r\n  inputChangedHandler = (event, controlName) => {\r\n    const updatedControls = updateObject(this.state.controls, {\r\n      [controlName]: updateObject(this.state.controls[controlName], {\r\n        value: event.target.value,\r\n        valid: checkValidity(\r\n          event.target.value,\r\n          this.state.controls[controlName].validation\r\n        ),\r\n        touched: true,\r\n      }),\r\n    });\r\n    this.setState({ controls: updatedControls });\r\n  };\r\n\r\n  submitHandler = (event) => {\r\n    event.preventDefault();\r\n    this.props.onAuth(\r\n      this.state.controls.email.value,\r\n      this.state.controls.password.value,\r\n      this.state.isSignup\r\n    );\r\n  };\r\n\r\n  switchAuthModeHandler = () => {\r\n    this.setState((prevState) => {\r\n      return { isSignup: !prevState.isSignup };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const formElementsArray = [];\r\n    for (let key in this.state.controls) {\r\n      formElementsArray.push({\r\n        id: key,\r\n        config: this.state.controls[key],\r\n      });\r\n    }\r\n\r\n    let form = formElementsArray.map((formElement) => (\r\n      <Input\r\n        key={formElement.id}\r\n        elementType={formElement.config.elementType}\r\n        elementConfig={formElement.config.elementConfig}\r\n        value={formElement.config.value}\r\n        invalid={!formElement.config.valid}\r\n        shouldValidate={formElement.config.validation}\r\n        touched={formElement.config.touched}\r\n        changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n      />\r\n    ));\r\n\r\n    if (this.props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n\r\n    let errorMessage = null;\r\n\r\n    if (this.props.error) {\r\n      errorMessage = <p>{this.props.error.message}</p>;\r\n    }\r\n\r\n    let authRedirect = null;\r\n\r\n    if (this.props.isAuthenticated) {\r\n      authRedirect = <Redirect to={this.props.authRedirectPath} />;\r\n    }\r\n\r\n    return (\r\n      <div className={classes.Auth}>\r\n        {authRedirect}\r\n        {errorMessage}\r\n        <form onSubmit={this.submitHandler}>\r\n          {form}\r\n          <Button btnType=\"Success\">SUBMIT</Button>\r\n        </form>\r\n        <Button btnType=\"Danger\" clicked={this.switchAuthModeHandler}>\r\n          SWITCH TO {this.state.isSignup ? \"SIGNIN\" : \"SIGNUP\"}\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    isAuthenticated: state.auth.token !== null,\r\n    buildingBurger: state.burgerBuilder.building,\r\n    authRedirectPath: state.auth.authRedirectPath,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAuth: (email, password, isSignup) =>\r\n      dispatch(actions.auth(email, password, isSignup)),\r\n    onSetAuthRedirectPath: () =>\r\n      dispatch(actions.setAuthRedirectPath(\"/burger-builder\")),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n"],"sourceRoot":""}