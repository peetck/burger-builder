{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","changed","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","className","classes","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","input","inputElement","inputClasses","InputElement","validationError","Invalid","ValidationError","onChange","join","options","option","displayValue","Input","Label","label"],"mappings":"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","file":"static/js/4.a5c1376e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__QGqTC\",\"ContactData\":\"Auth_ContactData__EBW3D\"};","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport classes from \"./Auth.module.css\";\r\nimport * as actions from \"../../store/actions/index\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport { updateObject, checkValidity } from \"../../shared/utility\";\r\n\r\nclass Auth extends Component {\r\n  state = {\r\n    controls: {\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Mail Address\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          isEmail: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      password: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"password\",\r\n          placeholder: \"Password\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 6,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n    },\r\n    isSignup: true,\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== \"/\") {\r\n      this.props.onSetAuthRedirectPath();\r\n    }\r\n  }\r\n\r\n  inputChangedHandler = (event, controlName) => {\r\n    const updatedControls = updateObject(this.state.controls, {\r\n      [controlName]: updateObject(this.state.controls[controlName], {\r\n        value: event.target.value,\r\n        valid: checkValidity(\r\n          event.target.value,\r\n          this.state.controls[controlName].validation\r\n        ),\r\n        touched: true,\r\n      }),\r\n    });\r\n    this.setState({ controls: updatedControls });\r\n  };\r\n\r\n  submitHandler = (event) => {\r\n    event.preventDefault();\r\n    this.props.onAuth(\r\n      this.state.controls.email.value,\r\n      this.state.controls.password.value,\r\n      this.state.isSignup\r\n    );\r\n  };\r\n\r\n  switchAuthModeHandler = () => {\r\n    this.setState((prevState) => {\r\n      return { isSignup: !prevState.isSignup };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const formElementsArray = [];\r\n    for (let key in this.state.controls) {\r\n      formElementsArray.push({\r\n        id: key,\r\n        config: this.state.controls[key],\r\n      });\r\n    }\r\n\r\n    let form = formElementsArray.map((formElement) => (\r\n      <Input\r\n        key={formElement.id}\r\n        elementType={formElement.config.elementType}\r\n        elementConfig={formElement.config.elementConfig}\r\n        value={formElement.config.value}\r\n        invalid={!formElement.config.valid}\r\n        shouldValidate={formElement.config.validation}\r\n        touched={formElement.config.touched}\r\n        changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n      />\r\n    ));\r\n\r\n    if (this.props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n\r\n    let errorMessage = null;\r\n\r\n    if (this.props.error) {\r\n      errorMessage = <p>{this.props.error.message}</p>;\r\n    }\r\n\r\n    let authRedirect = null;\r\n\r\n    if (this.props.isAuthenticated) {\r\n      authRedirect = <Redirect to={this.props.authRedirectPath} />;\r\n    }\r\n\r\n    return (\r\n      <div className={classes.Auth}>\r\n        {authRedirect}\r\n        {errorMessage}\r\n        <form onSubmit={this.submitHandler}>\r\n          {form}\r\n          <Button btnType=\"Success\">SUBMIT</Button>\r\n        </form>\r\n        <Button btnType=\"Danger\" clicked={this.switchAuthModeHandler}>\r\n          SWITCH TO {this.state.isSignup ? \"SIGNIN\" : \"SIGNUP\"}\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    isAuthenticated: state.auth.token !== null,\r\n    buildingBurger: state.burgerBuilder.building,\r\n    authRedirectPath: state.auth.authRedirectPath,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAuth: (email, password, isSignup) =>\r\n      dispatch(actions.auth(email, password, isSignup)),\r\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath(\"/\")),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n","import React from \"react\";\r\nimport classes from \"./Input.module.css\";\r\n\r\nconst input = (props) => {\r\n  let inputElement = null;\r\n  const inputClasses = [classes.InputElement];\r\n\r\n  let validationError = null;\r\n\r\n  if (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(classes.Invalid);\r\n    validationError = (\r\n      <p className={classes.ValidationError}>Please enter a valid value!</p>\r\n    );\r\n  }\r\n\r\n  switch (props.elementType) {\r\n    case \"input\":\r\n      inputElement = (\r\n        <input\r\n          onChange={props.changed}\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      );\r\n      break;\r\n    case \"textarea\":\r\n      inputElement = (\r\n        <textarea\r\n          onChange={props.changed}\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      );\r\n      break;\r\n    case \"select\":\r\n      inputElement = (\r\n        <select\r\n          onChange={props.changed}\r\n          className={inputClasses.join(\" \")}\r\n          value={props.value}\r\n        >\r\n          {props.elementConfig.options.map((option) => (\r\n            <option key={option.value} value={option.value}>\r\n              {option.displayValue}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          onChange={props.changed}\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Input}>\r\n      <label className={classes.Label}>{props.label}</label>\r\n      {inputElement}\r\n      {validationError}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__Pc0-H\",\"Label\":\"Input_Label__1es4q\",\"InputElement\":\"Input_InputElement__3j6_h\",\"Invalid\":\"Input_Invalid__37HzK\",\"ValidationError\":\"Input_ValidationError__2UZ2h\"};"],"sourceRoot":""}