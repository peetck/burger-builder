{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css"],"names":["checkoutSummary","props","className","classes","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","isEmail","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","invalid","shouldValidate","changed","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component","input","inputElement","inputClasses","InputElement","validationError","Invalid","ValidationError","onChange","join","option","Label","label","module","exports"],"mappings":"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","file":"static/js/3.e33bf305.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport Burger from \"../../Burger/Burger\";\r\nimport Button from \"../../UI/Button/Button\";\r\nimport classes from \"./CheckoutSummary.module.css\";\r\n\r\nconst checkoutSummary = (props) => {\r\n  return (\r\n    <div className={classes.CheckoutSummary}>\r\n      <h1>We hope it tastes well!</h1>\r\n      <div style={{ width: \"100%\", margin: \"auto\" }}>\r\n        <Burger ingredients={props.ingredients} />\r\n      </div>\r\n      <Button btnType=\"Danger\" clicked={props.checkoutCancelled}>\r\n        CANCEL\r\n      </Button>\r\n      <Button btnType=\"Success\" clicked={props.checkoutContinued}>\r\n        CONTINUE\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default checkoutSummary;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Button from \"../../../components/UI/Button/Button\";\r\nimport classes from \"./ContactData.module.css\";\r\nimport axios from \"../../../axios-orders\";\r\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\r\nimport Input from \"../../../components/UI/Input/Input\";\r\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\r\nimport * as actions from \"../../../store/actions/index\";\r\nimport { updateObject, checkValidity } from \"../../../shared/utility\";\r\n\r\nclass ContactData extends Component {\r\n  state = {\r\n    orderForm: {\r\n      name: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Your Name\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      street: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Street\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      zipCode: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"ZIP Code\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 5,\r\n          maxLength: 5,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      country: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Country\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Your E-Mail\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          isEmail: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      deliveryMethod: {\r\n        elementType: \"select\",\r\n        elementConfig: {\r\n          options: [\r\n            {\r\n              value: \"fastest\",\r\n              displayValue: \"Fastest\",\r\n            },\r\n            {\r\n              value: \"cheapest\",\r\n              displayValue: \"Cheapest\",\r\n            },\r\n          ],\r\n        },\r\n        value: \"fastest\",\r\n        validation: {},\r\n        valid: true,\r\n      },\r\n    },\r\n    formIsValid: false,\r\n  };\r\n\r\n  orderHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    const formData = {};\r\n    for (let formElementIdentifier in this.state.orderForm) {\r\n      formData[formElementIdentifier] = this.state.orderForm[\r\n        formElementIdentifier\r\n      ].value;\r\n    }\r\n    const order = {\r\n      ingredients: this.props.ings,\r\n      price: this.props.price,\r\n      orderData: formData,\r\n      userId: this.props.userId,\r\n    };\r\n\r\n    this.props.onOrderBurger(order, this.props.token);\r\n  };\r\n\r\n  inputChangedHandler = (event, inputIdentifier) => {\r\n    const updatedFormElement = updateObject(\r\n      this.state.orderForm[inputIdentifier],\r\n      {\r\n        value: event.target.value,\r\n        valid: checkValidity(\r\n          event.target.value,\r\n          this.state.orderForm[inputIdentifier].validation\r\n        ),\r\n        touched: true,\r\n      }\r\n    );\r\n    const updatedOrderForm = updateObject(this.state.orderForm, {\r\n      [inputIdentifier]: updatedFormElement,\r\n    });\r\n\r\n    let formIsValid = true;\r\n    for (let inputIdentifier in updatedOrderForm) {\r\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n    }\r\n\r\n    this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid });\r\n  };\r\n\r\n  render() {\r\n    const formElementsArray = [];\r\n    for (let key in this.state.orderForm) {\r\n      formElementsArray.push({\r\n        id: key,\r\n        config: this.state.orderForm[key],\r\n      });\r\n    }\r\n\r\n    let form = (\r\n      <form onSubmit={this.orderHandler}>\r\n        {formElementsArray.map((formElement) => (\r\n          <Input\r\n            key={formElement.id}\r\n            elementType={formElement.config.elementType}\r\n            elementConfig={formElement.config.elementConfig}\r\n            value={formElement.config.value}\r\n            invalid={!formElement.config.valid}\r\n            shouldValidate={formElement.config.validation}\r\n            touched={formElement.config.touched}\r\n            changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n          />\r\n        ))}\r\n        <Button btnType=\"Success\" disabled={!this.state.formIsValid}>\r\n          ORDER\r\n        </Button>\r\n      </form>\r\n    );\r\n    if (this.props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n    return (\r\n      <div className={classes.ContactData}>\r\n        <h4>Enter your Contact Data</h4>\r\n        {form}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredients,\r\n    price: state.burgerBuilder.totalPrice,\r\n    loading: state.order.loading,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onOrderBurger: (orderData, token) =>\r\n      dispatch(actions.purchaseBurger(orderData, token)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withErrorHandler(ContactData, axios));\r\n","import React, { Component } from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport CheckoutSummary from \"../../components/Order/CheckoutSummary/CheckoutSummary\";\r\nimport ContactData from \"./ContactData/ContactData\";\r\n\r\nclass Checkout extends Component {\r\n\r\n  checkoutCancelledHandler = () => {\r\n    this.props.history.goBack();\r\n  };\r\n\r\n  checkoutContinuedHandler = () => {\r\n    this.props.history.replace(\"/checkout/contact-data\");\r\n  };\r\n\r\n  render() {\r\n    let summary = <Redirect to=\"/\" />;\r\n    if (this.props.ings) {\r\n      const purchasedRedirect = this.props.purchased ? (\r\n        <Redirect to=\"/\" />\r\n      ) : null;\r\n      summary = (\r\n        <div>\r\n          {purchasedRedirect}\r\n          <CheckoutSummary\r\n            ingredients={this.props.ings}\r\n            checkoutCancelled={this.checkoutCancelledHandler}\r\n            checkoutContinued={this.checkoutContinuedHandler}\r\n          />\r\n\r\n          <Route\r\n            path={this.props.match.path + \"/contact-data\"}\r\n            component={ContactData}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n    return summary;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredients,\r\n    purchased: state.order.purchased,\r\n  };\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps)(Checkout);\r\n","import React from \"react\";\r\nimport classes from \"./Input.module.css\";\r\n\r\nconst input = (props) => {\r\n  let inputElement = null;\r\n  const inputClasses = [classes.InputElement];\r\n\r\n  let validationError = null;\r\n\r\n  if (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(classes.Invalid);\r\n    validationError = (\r\n      <p className={classes.ValidationError}>Please enter a valid value!</p>\r\n    );\r\n  }\r\n\r\n  switch (props.elementType) {\r\n    case \"input\":\r\n      inputElement = (\r\n        <input\r\n          onChange={props.changed}\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      );\r\n      break;\r\n    case \"textarea\":\r\n      inputElement = (\r\n        <textarea\r\n          onChange={props.changed}\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      );\r\n      break;\r\n    case \"select\":\r\n      inputElement = (\r\n        <select\r\n          onChange={props.changed}\r\n          className={inputClasses.join(\" \")}\r\n          value={props.value}\r\n        >\r\n          {props.elementConfig.options.map((option) => (\r\n            <option key={option.value} value={option.value}>\r\n              {option.displayValue}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          onChange={props.changed}\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Input}>\r\n      <label className={classes.Label}>{props.label}</label>\r\n      {inputElement}\r\n      {validationError}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__Pc0-H\",\"Label\":\"Input_Label__1es4q\",\"InputElement\":\"Input_InputElement__3j6_h\",\"Invalid\":\"Input_Invalid__37HzK\",\"ValidationError\":\"Input_ValidationError__2UZ2h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__NjQ0D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__29JMJ\"};"],"sourceRoot":""}