{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["input","props","inputElement","inputClasses","classes","InputElement","validationError","invalid","shouldValidate","touched","push","Invalid","className","ValidationError","elementType","onChange","changed","join","elementConfig","value","options","map","option","key","displayValue","Input","Label","label","module","exports","checkoutSummary","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","connect","state","ings","burgerBuilder","price","totalPrice","loading","order","token","auth","userId","dispatch","onOrderBurger","orderData","actions","withErrorHandler","useState","name","type","placeholder","validation","required","valid","street","zipCode","minLength","maxLength","country","email","isEmail","deliveryMethod","orderForm","setOrderForm","formIsValid","setFormIsValid","formElementsArray","id","config","form","onSubmit","event","preventDefault","formData","formElementIdentifier","formElement","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","inputChangedHandler","disabled","Spinner","ContactData","axios","purchased","summary","to","purchasedRedirect","history","goBack","replace","path","match","component"],"mappings":"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","file":"static/js/3.65cf2040.chunk.js","sourcesContent":["import React from \"react\";\r\nimport classes from \"./Input.module.css\";\r\n\r\nconst input = (props) => {\r\n  let inputElement = null;\r\n  const inputClasses = [classes.InputElement];\r\n\r\n  let validationError = null;\r\n\r\n  if (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(classes.Invalid);\r\n    validationError = (\r\n      <p className={classes.ValidationError}>Please enter a valid value!</p>\r\n    );\r\n  }\r\n\r\n  switch (props.elementType) {\r\n    case \"input\":\r\n      inputElement = (\r\n        <input\r\n          onChange={props.changed}\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      );\r\n      break;\r\n    case \"textarea\":\r\n      inputElement = (\r\n        <textarea\r\n          onChange={props.changed}\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      );\r\n      break;\r\n    case \"select\":\r\n      inputElement = (\r\n        <select\r\n          onChange={props.changed}\r\n          className={inputClasses.join(\" \")}\r\n          value={props.value}\r\n        >\r\n          {props.elementConfig.options.map((option) => (\r\n            <option key={option.value} value={option.value}>\r\n              {option.displayValue}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          onChange={props.changed}\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Input}>\r\n      <label className={classes.Label}>{props.label}</label>\r\n      {inputElement}\r\n      {validationError}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__Pc0-H\",\"Label\":\"Input_Label__1es4q\",\"InputElement\":\"Input_InputElement__3j6_h\",\"Invalid\":\"Input_Invalid__37HzK\",\"ValidationError\":\"Input_ValidationError__2UZ2h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__NjQ0D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__29JMJ\"};","import React from \"react\";\r\n\r\nimport Burger from \"../../Burger/Burger\";\r\nimport Button from \"../../UI/Button/Button\";\r\nimport classes from \"./CheckoutSummary.module.css\";\r\n\r\nconst checkoutSummary = (props) => {\r\n  return (\r\n    <div className={classes.CheckoutSummary}>\r\n      <h1>We hope it tastes well!</h1>\r\n      <div style={{ width: \"100%\", margin: \"auto\" }}>\r\n        <Burger ingredients={props.ingredients} />\r\n      </div>\r\n      <Button btnType=\"Danger\" clicked={props.checkoutCancelled}>\r\n        CANCEL\r\n      </Button>\r\n      <Button btnType=\"Success\" clicked={props.checkoutContinued}>\r\n        CONTINUE\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default checkoutSummary;\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Button from \"../../../components/UI/Button/Button\";\r\nimport classes from \"./ContactData.module.css\";\r\nimport axios from \"../../../axios-orders\";\r\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\r\nimport Input from \"../../../components/UI/Input/Input\";\r\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\r\nimport * as actions from \"../../../store/actions/index\";\r\nimport { updateObject, checkValidity } from \"../../../shared/utility\";\r\n\r\nconst ContactData = (props) => {\r\n  const [orderForm, setOrderForm] = useState({\r\n    name: {\r\n      elementType: \"input\",\r\n      elementConfig: {\r\n        type: \"text\",\r\n        placeholder: \"Your Name\",\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    street: {\r\n      elementType: \"input\",\r\n      elementConfig: {\r\n        type: \"text\",\r\n        placeholder: \"Street\",\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    zipCode: {\r\n      elementType: \"input\",\r\n      elementConfig: {\r\n        type: \"text\",\r\n        placeholder: \"ZIP Code\",\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        minLength: 5,\r\n        maxLength: 5,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    country: {\r\n      elementType: \"input\",\r\n      elementConfig: {\r\n        type: \"text\",\r\n        placeholder: \"Country\",\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    email: {\r\n      elementType: \"input\",\r\n      elementConfig: {\r\n        type: \"email\",\r\n        placeholder: \"Your E-Mail\",\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        isEmail: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    deliveryMethod: {\r\n      elementType: \"select\",\r\n      elementConfig: {\r\n        options: [\r\n          {\r\n            value: \"fastest\",\r\n            displayValue: \"Fastest\",\r\n          },\r\n          {\r\n            value: \"cheapest\",\r\n            displayValue: \"Cheapest\",\r\n          },\r\n        ],\r\n      },\r\n      value: \"fastest\",\r\n      validation: {},\r\n      valid: true,\r\n    },\r\n  });\r\n\r\n  const [formIsValid, setFormIsValid] = useState(false);\r\n  const orderHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    const formData = {};\r\n    for (let formElementIdentifier in orderForm) {\r\n      formData[formElementIdentifier] = orderForm[formElementIdentifier].value;\r\n    }\r\n    const order = {\r\n      ingredients: props.ings,\r\n      price: props.price,\r\n      orderData: formData,\r\n      userId: props.userId,\r\n    };\r\n\r\n    props.onOrderBurger(order, props.token);\r\n  };\r\n\r\n  const inputChangedHandler = (event, inputIdentifier) => {\r\n    const updatedFormElement = updateObject(orderForm[inputIdentifier], {\r\n      value: event.target.value,\r\n      valid: checkValidity(\r\n        event.target.value,\r\n        orderForm[inputIdentifier].validation\r\n      ),\r\n      touched: true,\r\n    });\r\n    const updatedOrderForm = updateObject(orderForm, {\r\n      [inputIdentifier]: updatedFormElement,\r\n    });\r\n\r\n    let formIsValid = true;\r\n    for (let inputIdentifier in updatedOrderForm) {\r\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n    }\r\n    setOrderForm(updatedOrderForm);\r\n    setFormIsValid(formIsValid);\r\n  };\r\n\r\n  const formElementsArray = [];\r\n  for (let key in orderForm) {\r\n    formElementsArray.push({\r\n      id: key,\r\n      config: orderForm[key],\r\n    });\r\n  }\r\n\r\n  let form = (\r\n    <form onSubmit={orderHandler}>\r\n      {formElementsArray.map((formElement) => (\r\n        <Input\r\n          key={formElement.id}\r\n          elementType={formElement.config.elementType}\r\n          elementConfig={formElement.config.elementConfig}\r\n          value={formElement.config.value}\r\n          invalid={!formElement.config.valid}\r\n          shouldValidate={formElement.config.validation}\r\n          touched={formElement.config.touched}\r\n          changed={(event) => inputChangedHandler(event, formElement.id)}\r\n        />\r\n      ))}\r\n      <Button btnType=\"Success\" disabled={!formIsValid}>\r\n        ORDER\r\n      </Button>\r\n    </form>\r\n  );\r\n  if (props.loading) {\r\n    form = <Spinner />;\r\n  }\r\n  return (\r\n    <div className={classes.ContactData}>\r\n      <h4>Enter your Contact Data</h4>\r\n      {form}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredients,\r\n    price: state.burgerBuilder.totalPrice,\r\n    loading: state.order.loading,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onOrderBurger: (orderData, token) =>\r\n      dispatch(actions.purchaseBurger(orderData, token)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withErrorHandler(ContactData, axios));\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport CheckoutSummary from \"../../components/Order/CheckoutSummary/CheckoutSummary\";\r\nimport ContactData from \"./ContactData/ContactData\";\r\n\r\nconst checkout = (props) => {\r\n  const checkoutCancelledHandler = () => {\r\n    props.history.goBack();\r\n  };\r\n\r\n  const checkoutContinuedHandler = () => {\r\n    props.history.replace(\"/checkout/contact-data\");\r\n  };\r\n\r\n  let summary = <Redirect to=\"/\" />;\r\n  if (props.ings) {\r\n    const purchasedRedirect = props.purchased ? <Redirect to=\"/\" /> : null;\r\n    summary = (\r\n      <div>\r\n        {purchasedRedirect}\r\n        <CheckoutSummary\r\n          ingredients={props.ings}\r\n          checkoutCancelled={checkoutCancelledHandler}\r\n          checkoutContinued={checkoutContinuedHandler}\r\n        />\r\n\r\n        <Route\r\n          path={props.match.path + \"/contact-data\"}\r\n          component={ContactData}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n  return summary;\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredients,\r\n    purchased: state.order.purchased,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(checkout);\r\n"],"sourceRoot":""}