{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["input","props","inputElement","inputClasses","classes","InputElement","validationError","invalid","shouldValidate","touched","push","Invalid","className","ValidationError","elementType","onChange","changed","join","elementConfig","value","options","map","option","key","displayValue","Input","Label","label","module","exports","checkoutSummary","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","type","placeholder","validation","required","valid","street","zipCode","minLength","maxLength","country","email","isEmail","deliveryMethod","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","formElementsArray","this","id","config","form","onSubmit","formElement","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component"],"mappings":"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","file":"static/js/3.f71134f9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport classes from \"./Input.module.css\";\r\n\r\nconst input = (props) => {\r\n  let inputElement = null;\r\n  const inputClasses = [classes.InputElement];\r\n\r\n  let validationError = null;\r\n\r\n  if (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(classes.Invalid);\r\n    validationError = (\r\n      <p className={classes.ValidationError}>Please enter a valid value!</p>\r\n    );\r\n  }\r\n\r\n  switch (props.elementType) {\r\n    case \"input\":\r\n      inputElement = (\r\n        <input\r\n          onChange={props.changed}\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      );\r\n      break;\r\n    case \"textarea\":\r\n      inputElement = (\r\n        <textarea\r\n          onChange={props.changed}\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      );\r\n      break;\r\n    case \"select\":\r\n      inputElement = (\r\n        <select\r\n          onChange={props.changed}\r\n          className={inputClasses.join(\" \")}\r\n          value={props.value}\r\n        >\r\n          {props.elementConfig.options.map((option) => (\r\n            <option key={option.value} value={option.value}>\r\n              {option.displayValue}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          onChange={props.changed}\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Input}>\r\n      <label className={classes.Label}>{props.label}</label>\r\n      {inputElement}\r\n      {validationError}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__Pc0-H\",\"Label\":\"Input_Label__1es4q\",\"InputElement\":\"Input_InputElement__3j6_h\",\"Invalid\":\"Input_Invalid__37HzK\",\"ValidationError\":\"Input_ValidationError__2UZ2h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__NjQ0D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__29JMJ\"};","import React from \"react\";\r\n\r\nimport Burger from \"../../Burger/Burger\";\r\nimport Button from \"../../UI/Button/Button\";\r\nimport classes from \"./CheckoutSummary.module.css\";\r\n\r\nconst checkoutSummary = (props) => {\r\n  return (\r\n    <div className={classes.CheckoutSummary}>\r\n      <h1>We hope it tastes well!</h1>\r\n      <div style={{ width: \"100%\", margin: \"auto\" }}>\r\n        <Burger ingredients={props.ingredients} />\r\n      </div>\r\n      <Button btnType=\"Danger\" clicked={props.checkoutCancelled}>\r\n        CANCEL\r\n      </Button>\r\n      <Button btnType=\"Success\" clicked={props.checkoutContinued}>\r\n        CONTINUE\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default checkoutSummary;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Button from \"../../../components/UI/Button/Button\";\r\nimport classes from \"./ContactData.module.css\";\r\nimport axios from \"../../../axios-orders\";\r\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\r\nimport Input from \"../../../components/UI/Input/Input\";\r\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\r\nimport * as actions from \"../../../store/actions/index\";\r\nimport { updateObject, checkValidity } from \"../../../shared/utility\";\r\n\r\nclass ContactData extends Component {\r\n  state = {\r\n    orderForm: {\r\n      name: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Your Name\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      street: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Street\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      zipCode: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"ZIP Code\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 5,\r\n          maxLength: 5,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      country: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Country\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Your E-Mail\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          isEmail: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      deliveryMethod: {\r\n        elementType: \"select\",\r\n        elementConfig: {\r\n          options: [\r\n            {\r\n              value: \"fastest\",\r\n              displayValue: \"Fastest\",\r\n            },\r\n            {\r\n              value: \"cheapest\",\r\n              displayValue: \"Cheapest\",\r\n            },\r\n          ],\r\n        },\r\n        value: \"fastest\",\r\n        validation: {},\r\n        valid: true,\r\n      },\r\n    },\r\n    formIsValid: false,\r\n  };\r\n\r\n  orderHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    const formData = {};\r\n    for (let formElementIdentifier in this.state.orderForm) {\r\n      formData[formElementIdentifier] = this.state.orderForm[\r\n        formElementIdentifier\r\n      ].value;\r\n    }\r\n    const order = {\r\n      ingredients: this.props.ings,\r\n      price: this.props.price,\r\n      orderData: formData,\r\n      userId: this.props.userId,\r\n    };\r\n\r\n    this.props.onOrderBurger(order, this.props.token);\r\n  };\r\n\r\n  inputChangedHandler = (event, inputIdentifier) => {\r\n    const updatedFormElement = updateObject(\r\n      this.state.orderForm[inputIdentifier],\r\n      {\r\n        value: event.target.value,\r\n        valid: checkValidity(\r\n          event.target.value,\r\n          this.state.orderForm[inputIdentifier].validation\r\n        ),\r\n        touched: true,\r\n      }\r\n    );\r\n    const updatedOrderForm = updateObject(this.state.orderForm, {\r\n      [inputIdentifier]: updatedFormElement,\r\n    });\r\n\r\n    let formIsValid = true;\r\n    for (let inputIdentifier in updatedOrderForm) {\r\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n    }\r\n\r\n    this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid });\r\n  };\r\n\r\n  render() {\r\n    const formElementsArray = [];\r\n    for (let key in this.state.orderForm) {\r\n      formElementsArray.push({\r\n        id: key,\r\n        config: this.state.orderForm[key],\r\n      });\r\n    }\r\n\r\n    let form = (\r\n      <form onSubmit={this.orderHandler}>\r\n        {formElementsArray.map((formElement) => (\r\n          <Input\r\n            key={formElement.id}\r\n            elementType={formElement.config.elementType}\r\n            elementConfig={formElement.config.elementConfig}\r\n            value={formElement.config.value}\r\n            invalid={!formElement.config.valid}\r\n            shouldValidate={formElement.config.validation}\r\n            touched={formElement.config.touched}\r\n            changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n          />\r\n        ))}\r\n        <Button btnType=\"Success\" disabled={!this.state.formIsValid}>\r\n          ORDER\r\n        </Button>\r\n      </form>\r\n    );\r\n    if (this.props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n    return (\r\n      <div className={classes.ContactData}>\r\n        <h4>Enter your Contact Data</h4>\r\n        {form}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredients,\r\n    price: state.burgerBuilder.totalPrice,\r\n    loading: state.order.loading,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onOrderBurger: (orderData, token) =>\r\n      dispatch(actions.purchaseBurger(orderData, token)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withErrorHandler(ContactData, axios));\r\n","import React, { Component } from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport CheckoutSummary from \"../../components/Order/CheckoutSummary/CheckoutSummary\";\r\nimport ContactData from \"./ContactData/ContactData\";\r\n\r\nclass Checkout extends Component {\r\n\r\n  checkoutCancelledHandler = () => {\r\n    this.props.history.goBack();\r\n  };\r\n\r\n  checkoutContinuedHandler = () => {\r\n    this.props.history.replace(\"/checkout/contact-data\");\r\n  };\r\n\r\n  render() {\r\n    let summary = <Redirect to=\"/\" />;\r\n    if (this.props.ings) {\r\n      const purchasedRedirect = this.props.purchased ? (\r\n        <Redirect to=\"/\" />\r\n      ) : null;\r\n      summary = (\r\n        <div>\r\n          {purchasedRedirect}\r\n          <CheckoutSummary\r\n            ingredients={this.props.ings}\r\n            checkoutCancelled={this.checkoutCancelledHandler}\r\n            checkoutContinued={this.checkoutContinuedHandler}\r\n          />\r\n\r\n          <Route\r\n            path={this.props.match.path + \"/contact-data\"}\r\n            component={ContactData}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n    return summary;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredients,\r\n    purchased: state.order.purchased,\r\n  };\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps)(Checkout);\r\n"],"sourceRoot":""}