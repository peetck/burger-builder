{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/Auth.js"],"names":["input","props","inputElement","inputClasses","classes","InputElement","validationError","invalid","shouldValidate","touched","push","Invalid","className","ValidationError","elementType","onChange","changed","join","elementConfig","value","options","map","option","key","displayValue","Input","Label","label","module","exports","connect","state","loading","auth","error","isAuthenticated","token","buildingBurger","burgerBuilder","building","authRedirectPath","dispatch","onAuth","email","password","isSignup","actions","onSetAuthRedirectPath","useState","type","placeholder","validation","required","isEmail","valid","minLength","authForm","setAuthForm","setIsSignup","useEffect","formElementsArray","id","config","form","formElement","event","controlName","updatedControls","updateObject","target","checkValidity","inputChangedHandler","errorMessage","message","authRedirect","to","Auth","onSubmit","preventDefault","btnType","clicked"],"mappings":"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","file":"static/js/4.be106fb9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport classes from \"./Input.module.css\";\r\n\r\nconst input = (props) => {\r\n  let inputElement = null;\r\n  const inputClasses = [classes.InputElement];\r\n\r\n  let validationError = null;\r\n\r\n  if (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(classes.Invalid);\r\n    validationError = (\r\n      <p className={classes.ValidationError}>Please enter a valid value!</p>\r\n    );\r\n  }\r\n\r\n  switch (props.elementType) {\r\n    case \"input\":\r\n      inputElement = (\r\n        <input\r\n          onChange={props.changed}\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      );\r\n      break;\r\n    case \"textarea\":\r\n      inputElement = (\r\n        <textarea\r\n          onChange={props.changed}\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      );\r\n      break;\r\n    case \"select\":\r\n      inputElement = (\r\n        <select\r\n          onChange={props.changed}\r\n          className={inputClasses.join(\" \")}\r\n          value={props.value}\r\n        >\r\n          {props.elementConfig.options.map((option) => (\r\n            <option key={option.value} value={option.value}>\r\n              {option.displayValue}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          onChange={props.changed}\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Input}>\r\n      <label className={classes.Label}>{props.label}</label>\r\n      {inputElement}\r\n      {validationError}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__Pc0-H\",\"Label\":\"Input_Label__1es4q\",\"InputElement\":\"Input_InputElement__3j6_h\",\"Invalid\":\"Input_Invalid__37HzK\",\"ValidationError\":\"Input_ValidationError__2UZ2h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__QGqTC\",\"ContactData\":\"Auth_ContactData__EBW3D\"};","import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport classes from \"./Auth.module.css\";\r\nimport * as actions from \"../../store/actions/index\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport { updateObject, checkValidity } from \"../../shared/utility\";\r\n\r\nconst Auth = (props) => {\r\n  const [authForm, setAuthForm] = useState({\r\n    email: {\r\n      elementType: \"input\",\r\n      elementConfig: {\r\n        type: \"email\",\r\n        placeholder: \"Mail Address\",\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        isEmail: true,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n    password: {\r\n      elementType: \"input\",\r\n      elementConfig: {\r\n        type: \"password\",\r\n        placeholder: \"Password\",\r\n      },\r\n      value: \"\",\r\n      validation: {\r\n        required: true,\r\n        minLength: 6,\r\n      },\r\n      valid: false,\r\n      touched: false,\r\n    },\r\n  });\r\n\r\n  const [isSignup, setIsSignup] = useState(true);\r\n\r\n  const { buildingBurger, authRedirectPath, onSetAuthRedirectPath } = props;\r\n\r\n  useEffect(() => {\r\n    if (!buildingBurger && authRedirectPath !== \"/\") {\r\n      onSetAuthRedirectPath();\r\n    }\r\n  }, [buildingBurger, authRedirectPath, onSetAuthRedirectPath]);\r\n\r\n  const inputChangedHandler = (event, controlName) => {\r\n    const updatedControls = updateObject(authForm, {\r\n      [controlName]: updateObject(authForm[controlName], {\r\n        value: event.target.value,\r\n        valid: checkValidity(\r\n          event.target.value,\r\n          authForm[controlName].validation\r\n        ),\r\n        touched: true,\r\n      }),\r\n    });\r\n    setAuthForm(updatedControls);\r\n  };\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n    props.onAuth(authForm.email.value, authForm.password.value, isSignup);\r\n  };\r\n\r\n  const switchAuthModeHandler = () => {\r\n    setIsSignup(!isSignup);\r\n  };\r\n\r\n  const formElementsArray = [];\r\n  for (let key in authForm) {\r\n    formElementsArray.push({\r\n      id: key,\r\n      config: authForm[key],\r\n    });\r\n  }\r\n\r\n  let form = formElementsArray.map((formElement) => (\r\n    <Input\r\n      key={formElement.id}\r\n      elementType={formElement.config.elementType}\r\n      elementConfig={formElement.config.elementConfig}\r\n      value={formElement.config.value}\r\n      invalid={!formElement.config.valid}\r\n      shouldValidate={formElement.config.validation}\r\n      touched={formElement.config.touched}\r\n      changed={(event) => inputChangedHandler(event, formElement.id)}\r\n    />\r\n  ));\r\n\r\n  if (props.loading) {\r\n    form = <Spinner />;\r\n  }\r\n\r\n  let errorMessage = null;\r\n\r\n  if (props.error) {\r\n    errorMessage = <p>{props.error.message}</p>;\r\n  }\r\n\r\n  let authRedirect = null;\r\n\r\n  if (props.isAuthenticated) {\r\n    authRedirect = <Redirect to={props.authRedirectPath} />;\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Auth}>\r\n      {authRedirect}\r\n      <h1>{isSignup ? \"SIGNUP\" : \"SIGNIN\"}</h1>\r\n      {errorMessage}\r\n      <form onSubmit={submitHandler}>\r\n        {form}\r\n        <Button btnType=\"Success\">SUBMIT</Button>\r\n      </form>\r\n      <Button btnType=\"Danger\" clicked={switchAuthModeHandler}>\r\n        SWITCH TO {isSignup ? \"SIGNIN\" : \"SIGNUP\"}\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    isAuthenticated: state.auth.token !== null,\r\n    buildingBurger: state.burgerBuilder.building,\r\n    authRedirectPath: state.auth.authRedirectPath,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAuth: (email, password, isSignup) =>\r\n      dispatch(actions.auth(email, password, isSignup)),\r\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath(\"/\")),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n"],"sourceRoot":""}